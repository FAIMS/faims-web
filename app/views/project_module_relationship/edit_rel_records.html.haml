- title @project_module.name + " - Relationship"
= breadcrumbs
- get_files(@attributes,8,4)
.well
  - if !session[:show].nil? and !session[:show].empty?
    = link_to "<i class='icon-arrow-left'></i> Back".html_safe, show_rel_association_path(@project_module,session[:uuid])+"?offset=0", :class => 'btn'
  - else
    - show_deleted = session[:show_deleted].nil? ? '' : session[:show_deleted]
    - if session[:action].eql?('list_typed_rel_records')
      = link_to "<i class='icon-arrow-left'></i> Back".html_safe, list_typed_rel_records_path(@project_module)+"?type="+session[:type]+"&show_deleted="+ show_deleted, :class => 'btn'
    - elsif session[:action].eql?('show_rel_records')
      = link_to "<i class='icon-arrow-left'></i> Back".html_safe, show_rel_records_path(@project_module)+"?query="+session[:query]+"&show_deleted="+ show_deleted, :class => 'btn'
  - if !@deleted[1].nil?
    = link_to "<i class='icon-edit icon-white'></i> Restore".html_safe, restore_rel_records_path(@project_module,session[:relationshipid]), :class => 'btn btn-warning', :id => 'restore-record'
  - else
    = link_to "<i class='icon-remove icon-white'></i> Delete".html_safe, delete_rel_records_path(@project_module,session[:relationshipid]), :class => 'btn btn-warning', :id => 'delete-record', confirm: "Are you sure you want to delete this record?"
  = link_to "Show Relationship Member", show_rel_members_path(@project_module,session[:relationshipid]) + "?offset=0&relntypeid=" + @attributes[0][7].to_s, :class => 'btn'
  = link_to "Show History", show_rel_history_path(@project_module,session[:relationshipid]), :class => 'btn'
.container
  .row-fluid.labels
    .span3
      %label 
    .span2
      %label Constrained Data:
    .span3
      %label Annotation:
    .span1
      %label Certainty:
    .span3
  - attributeGroup = @attributes.group_by{|a|a[3]}
  - attributeGroup.each do |key,val|
    .update-rel-form
      = simple_form_for :attr, :url => update_rel_records_path, :method => "post" do|f|
        .step-container
          .arch_ent_record_content
            = f.hidden_field :relationshipid, :value => val[0][0]
            = f.hidden_field :attribute_id, :value => val[0][2]
            = f.hidden_field 'ignore_errors'
            - show_error_button = 'hidden'
            - for attribute in val
              .row-fluid
                %label.span3
                  %h4.attribute-name=key
                - if !@vocab_name[attribute[2]].empty?
                  .span2
                    - vocabs = @vocab_name[attribute[2]]
                    - vocabs = vocab_name_to_breadcrumb(vocabs)
                    - if attribute[1].blank?
                      = f.input :vocab_id , collection: vocabs, label: false, input_html: {name: 'attr[vocab_id][]'}
                    - else
                      = f.input :vocab_id , collection: vocabs, label: false, selected: attribute[1], input_html: {name: 'attr[vocab_id][]'}
                - else
                  .span2

                .span3
                  = f.text_field :freetext, :value => attribute[4], name: 'attr[freetext][]', :class => "span12"
                .span1
                  = f.text_field :certainty, :value => attribute[5], name: 'attr[certainty][]', :class => "span12"
                .span3
                  - if attribute[10] == 1
                    - show_error_button = nil
                  = f.submit "Update", :class => "btn btn-inverse"
                  = f.submit "Update and Ignore errors", :class => "btn btn-primary ignore-errors-btn #{show_error_button}"
              - if attribute[10] == 1
                - show_error_button = nil
                .form-attribute-error
                  - attribute[11].each_line(';') do |l|
                    - next if l.gsub(';', '').blank?
                    %li=l.gsub(';', '')

- if !@files.empty?
  .attached-files
    %h2 Attached Files
    %ul
      - @files.each do |path,name|
        %li
          %form{:method => 'GET', :action => download_attached_file_path(@project_module), :id => 'download-attached-file'}
            %input{:type => 'hidden', :name => 'path', :value => path}
            %input{:type => 'hidden', :name => 'name', :value => name}
            - if File.exists? @project_module.get_path(:project_module_dir) + path
              %a{:href => '#'}
                = name
            - else
              %p
                = name
#loading.hidden.indicator
  = image_tag "loading.gif"
  %p
    %span Updating
